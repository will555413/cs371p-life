        -:    0:Source:Life.c++
        -:    0:Graph:Life.gcno
        -:    0:Data:Life.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "Life.h"
        -:    2:
        -:    3:using namespace std;
        -:    4:
        -:    5:// ------------
        -:    6:// AbstractCell
        -:    7:// ------------
function _ZN12AbstractCellC2Ec called 260 returned 100% blocks executed 100%
      260:    8:AbstractCell::AbstractCell(char S)
        -:    9:{
      260:   10:	if(S=='.'||S=='-')
branch  0 taken 73% (fallthrough)
branch  1 taken 27%
branch  2 taken 39% (fallthrough)
branch  3 taken 61%
      144:   11:		state = false;
        -:   12:	else
      116:   13:		state = true;
      260:   14:}
        -:   15:
function _ZN12AbstractCell11shift_stateEv called 42 returned 100% blocks executed 100%
       42:   16:void AbstractCell::shift_state(){state = !state;}
        -:   17:
function _ZN12AbstractCell7isAliveEv called 619 returned 100% blocks executed 100%
      619:   18:bool AbstractCell::isAlive(){ return state;}
        -:   19:
function _ZN12AbstractCell11get_pointerEv called 304 returned 100% blocks executed 100%
      304:   20:AbstractCell* AbstractCell::get_pointer(){return this;}
        -:   21:
        -:   22:// -----------
        -:   23:// Conway Cell
        -:   24:// -----------
function _ZN10ConwayCellC2Ec called 137 returned 100% blocks executed 100%
      137:   25:ConwayCell::ConwayCell(char S): AbstractCell(S) {}
call    0 returned 100%
        -:   26:
function _ZN10ConwayCell6evolveEPP12AbstractCell called 30 returned 100% blocks executed 95%
       30:   27:bool ConwayCell::evolve(AbstractCell** const neighbors){
       30:   28:	int count = 0;
      270:   29:	for(int i = 0; i<=7; ++i){
branch  0 taken 89%
branch  1 taken 11% (fallthrough)
      240:   30:		if(neighbors[i] != NULL && neighbors[i]->isAlive())
branch  0 taken 77% (fallthrough)
branch  1 taken 23%
call    2 returned 100%
branch  3 taken 27% (fallthrough)
branch  4 taken 73%
branch  5 taken 21% (fallthrough)
branch  6 taken 79%
       50:   31:			++count;
        -:   32:	}
       30:   33:	assert(count >= 0 && count <= 8);
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
        -:   34:
       30:   35:	if(state && (count < 2 || count > 3))
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
branch  2 taken 67% (fallthrough)
branch  3 taken 33%
branch  4 taken 50% (fallthrough)
branch  5 taken 50%
        4:   36:		return true;
       26:   37:	else if(!state && count == 3)
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
branch  2 taken 13% (fallthrough)
branch  3 taken 88%
        3:   38:		return true;
       23:   39:	return false;
        -:   40:}
function _ZN10ConwayCell9get_stateEv called 81 returned 100% blocks executed 100%
       81:   41:char ConwayCell::get_state(){
       81:   42:	if(state)
branch  0 taken 40% (fallthrough)
branch  1 taken 60%
       32:   43:		return '*';
        -:   44:	else
       49:   45:		return '.';
        -:   46:}
        -:   47:
        -:   48:// ------------
        -:   49:// Fredkin Cell
        -:   50:// ------------
function _ZN11FredkinCellC2Ec called 123 returned 100% blocks executed 78%
      123:   51:FredkinCell::FredkinCell(char S): AbstractCell(S){
call    0 returned 100%
      123:   52:	if(S=='+')
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   53:		age = 10;
      123:   54:	else if(S <= '9' && S >= '0')
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 41% (fallthrough)
branch  3 taken 59%
       50:   55:		age = S - '0';
      123:   56:	assert(age >= 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
      123:   57:}
        -:   58:
function _ZN11FredkinCell6evolveEPP12AbstractCell called 83 returned 100% blocks executed 94%
       83:   59:bool FredkinCell::evolve(AbstractCell** const neighbors){
       83:   60:	int count = 0;
       83:   61:	if(neighbors[1] && neighbors[1]->isAlive())
branch  0 taken 82% (fallthrough)
branch  1 taken 18%
call    2 returned 100%
branch  3 taken 44% (fallthrough)
branch  4 taken 56%
branch  5 taken 36% (fallthrough)
branch  6 taken 64%
       30:   62:		++count;
       83:   63:	if(neighbors[3] && neighbors[3]->isAlive())
branch  0 taken 82% (fallthrough)
branch  1 taken 18%
call    2 returned 100%
branch  3 taken 37% (fallthrough)
branch  4 taken 63%
branch  5 taken 30% (fallthrough)
branch  6 taken 70%
       25:   64:		++count;
       83:   65:	if(neighbors[4] && neighbors[4]->isAlive())
branch  0 taken 82% (fallthrough)
branch  1 taken 18%
call    2 returned 100%
branch  3 taken 41% (fallthrough)
branch  4 taken 59%
branch  5 taken 34% (fallthrough)
branch  6 taken 66%
       28:   66:		++count;
       83:   67:	if(neighbors[6] && neighbors[6]->isAlive())
branch  0 taken 82% (fallthrough)
branch  1 taken 18%
call    2 returned 100%
branch  3 taken 41% (fallthrough)
branch  4 taken 59%
branch  5 taken 34% (fallthrough)
branch  6 taken 66%
       28:   68:		++count;
       83:   69:	assert(count >= 0 && count <= 4);
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
        -:   70:
       83:   71:	if(state && (count == 0 || count == 2 || count == 4)){
branch  0 taken 36% (fallthrough)
branch  1 taken 64%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 70% (fallthrough)
branch  5 taken 30%
branch  6 taken 5% (fallthrough)
branch  7 taken 95%
       10:   72:		age = 0;
       10:   73:		return true;
        -:   74:	}
       73:   75:	else if(!state && (count == 1 || count == 3)){
branch  0 taken 73% (fallthrough)
branch  1 taken 27%
branch  2 taken 62% (fallthrough)
branch  3 taken 38%
branch  4 taken 3% (fallthrough)
branch  5 taken 97%
       21:   76:		assert(age == 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
       21:   77:		return true;
        -:   78:	}
       52:   79:	if(state){
branch  0 taken 38% (fallthrough)
branch  1 taken 62%
       20:   80:		assert(age >= 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
       20:   81:		++age;
        -:   82:	}
       52:   83:	return false;
        -:   84:}
function _ZN11FredkinCell9get_stateEv called 178 returned 100% blocks executed 100%
      178:   85:char FredkinCell::get_state(){
      178:   86:	if(state){
branch  0 taken 44% (fallthrough)
branch  1 taken 56%
       78:   87:		if(age >= 10)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        1:   88:			return '+';
        -:   89:		else
       77:   90:			return (char)(age+'0');
        -:   91:	}
        -:   92:	else
      100:   93:		return '-';
        -:   94:}
        -:   95:
        -:   96:// ----
        -:   97:// Cell
        -:   98:// ----
        -:   99:
function _ZN4CellC2Ec called 66 returned 100% blocks executed 100%
       66:  100:Cell::Cell(char S){
       66:  101:	if(S == '*'||S == '.')
branch  0 taken 83% (fallthrough)
branch  1 taken 17%
branch  2 taken 15% (fallthrough)
branch  3 taken 85%
       19:  102:		_p = new ConwayCell(S);
call    0 returned 100%
call    1 returned 100%
        -:  103:	else
       47:  104:		_p = new FredkinCell(S);
call    0 returned 100%
call    1 returned 100%
       66:  105:}
        -:  106:
function _ZN4CellC2ERKS_ called 94 returned 100% blocks executed 88%
       94:  107:Cell::Cell(const Cell& rhs){
       94:  108:	if(dynamic_cast<ConwayCell*>(rhs._p))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 15% (fallthrough)
branch  4 taken 85%
       14:  109:		_p = new ConwayCell(*(dynamic_cast<ConwayCell*>(rhs._p)));
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
        -:  110:	else
       80:  111:		_p = new FredkinCell(*(dynamic_cast<FredkinCell*>(rhs._p)));
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
       94:  112:}
        -:  113:
function _ZN4CellD2Ev called 160 returned 100% blocks executed 100%
      160:  114:Cell::~Cell(){
      160:  115:	delete _p;
call    0 returned 100%
      160:  116:}
        -:  117:
function _ZN4Cell6evolveEPP12AbstractCell called 53 returned 100% blocks executed 94%
       53:  118:bool Cell::evolve(AbstractCell** const neighbors){
       53:  119:	char oldstate = _p->get_state();
call    0 returned 100%
        -:  120:	// AbstractCell* neighbors[8];
        -:  121:	// for(int i=0; i<8; ++i)
        -:  122:	// 	neighbors[i] = n[i]->_p;
       53:  123:	bool output = _p->evolve(neighbors);
call    0 returned 100%
       53:  124:	if(FredkinCell* cell = dynamic_cast<FredkinCell*>(_p)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
branch  3 taken 98% (fallthrough)
branch  4 taken 2%
       52:  125:		if(oldstate == '1' && cell->get_state()=='2'){
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
branch  5 taken 10% (fallthrough)
branch  6 taken 90%
        5:  126:			_p = new ConwayCell('*');
call    0 returned 100%
call    1 returned 100%
        5:  127:			delete cell;
call    0 returned 100%
        -:  128:		}
        -:  129:	}
       53:  130:	return output;
        -:  131:}
        -:  132:
        -:  133:// Cell& Cell::operator=(const Cell& rhs){
        -:  134:// 	delete _p;
        -:  135:// 	_p = rhs._p;
        -:  136:// 	return *this;
        -:  137:// }
        -:  138:
function _ZN4Cell11shift_stateEv called 4 returned 100% blocks executed 100%
        4:  139:void Cell::shift_state(){
        4:  140:	_p->shift_state();
call    0 returned 100%
        4:  141:}
        -:  142:
function _ZN4Cell9get_stateEv called 98 returned 100% blocks executed 100%
       98:  143:char Cell::get_state(){
       98:  144:	return _p->get_state();
call    0 returned 100%
        -:  145:}
        -:  146:
function _ZN4Cell7isAliveEv called 45 returned 100% blocks executed 100%
       45:  147:bool Cell::isAlive(){
       45:  148:	return _p->isAlive();
call    0 returned 100%
        -:  149:}
        -:  150:
function _ZN4Cell11get_pointerEv called 336 returned 100% blocks executed 100%
      336:  151:AbstractCell* Cell::get_pointer(){
      336:  152:	return _p;
function _GLOBAL__sub_I__ZN12AbstractCellC2Ec called 1 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 1 returned 100% blocks executed 100%
        3:  153:}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
